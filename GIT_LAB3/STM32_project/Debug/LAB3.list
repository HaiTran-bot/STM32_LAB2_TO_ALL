
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e14  08002e14  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08002e14  08002e14  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e14  08002e14  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08002e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000bc  08002ed8  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002ed8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009da5  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c15  00000000  00000000  00029e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d9a  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb37  00000000  00000000  00043bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824dd  00000000  00000000  0004f729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000d1c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dd8 	.word	0x08002dd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08002dd8 	.word	0x08002dd8

0800014c <isButtonNoPressed>:
int KeyReg1[NO_BUTTON] = {RELEASED, RELEASED, RELEASED};
int KeyReg2[NO_BUTTON] = {RELEASED, RELEASED, RELEASED};
int KeyReg3[NO_BUTTON] = {RELEASED, RELEASED, RELEASED};


int isButtonNoPressed(int no){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[no] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonNoPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonNoPressed+0x22>
		button_flag[no] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonNoPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonNoPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d8 	.word	0x200000d8

08000180 <getKeyInput>:

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_BUTTON; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e078      	b.n	800027e <getKeyInput+0xfe>
        KeyReg2[i] = KeyReg1[i];
 800018c:	4a40      	ldr	r2, [pc, #256]	; (8000290 <getKeyInput+0x110>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	493f      	ldr	r1, [pc, #252]	; (8000294 <getKeyInput+0x114>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg0[i];
 800019c:	4a3e      	ldr	r2, [pc, #248]	; (8000298 <getKeyInput+0x118>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493a      	ldr	r1, [pc, #232]	; (8000290 <getKeyInput+0x110>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg0[i] = HAL_GPIO_ReadPin(sw0_GPIO_Port, sw0_Pin << i);
 80001ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	fa02 f303 	lsl.w	r3, r2, r3
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	4619      	mov	r1, r3
 80001ba:	4838      	ldr	r0, [pc, #224]	; (800029c <getKeyInput+0x11c>)
 80001bc:	f001 fde0 	bl	8001d80 <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4619      	mov	r1, r3
 80001c4:	4a34      	ldr	r2, [pc, #208]	; (8000298 <getKeyInput+0x118>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4930      	ldr	r1, [pc, #192]	; (8000298 <getKeyInput+0x118>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d14b      	bne.n	8000278 <getKeyInput+0xf8>
 80001e0:	4a2b      	ldr	r2, [pc, #172]	; (8000290 <getKeyInput+0x110>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	492a      	ldr	r1, [pc, #168]	; (8000294 <getKeyInput+0x114>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d141      	bne.n	8000278 <getKeyInput+0xf8>
            if (KeyReg2[i] != KeyReg3[i]){
 80001f4:	4a27      	ldr	r2, [pc, #156]	; (8000294 <getKeyInput+0x114>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4928      	ldr	r1, [pc, #160]	; (80002a0 <getKeyInput+0x120>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d018      	beq.n	800023a <getKeyInput+0xba>
                KeyReg3[i] = KeyReg2[i];
 8000208:	4a22      	ldr	r2, [pc, #136]	; (8000294 <getKeyInput+0x114>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4923      	ldr	r1, [pc, #140]	; (80002a0 <getKeyInput+0x120>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (KeyReg0[i] == PRESSED){
 8000218:	4a1f      	ldr	r2, [pc, #124]	; (8000298 <getKeyInput+0x118>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d129      	bne.n	8000278 <getKeyInput+0xf8>
                    timerForKeyPress[i] = 100;
 8000224:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <getKeyInput+0x124>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2164      	movs	r1, #100	; 0x64
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    button_flag[i] = 1;
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <getKeyInput+0x128>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2101      	movs	r1, #1
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000238:	e01e      	b.n	8000278 <getKeyInput+0xf8>
                }
            } else {
                timerForKeyPress[i]--;
 800023a:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <getKeyInput+0x124>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	1e5a      	subs	r2, r3, #1
 8000244:	4917      	ldr	r1, [pc, #92]	; (80002a4 <getKeyInput+0x124>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (timerForKeyPress[i] == 0){
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <getKeyInput+0x124>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d10f      	bne.n	8000278 <getKeyInput+0xf8>
                    timerForKeyPress[i] = 10;
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <getKeyInput+0x124>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	210a      	movs	r1, #10
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (KeyReg3[i] == PRESSED){
 8000262:	4a0f      	ldr	r2, [pc, #60]	; (80002a0 <getKeyInput+0x120>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d104      	bne.n	8000278 <getKeyInput+0xf8>
                        button_flag[i] = 1;
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <getKeyInput+0x128>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2101      	movs	r1, #1
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NO_BUTTON; i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	dd83      	ble.n	800018c <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000018 	.word	0x20000018
 8000294:	20000024 	.word	0x20000024
 8000298:	2000000c 	.word	0x2000000c
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000030 	.word	0x20000030
 80002a4:	20000000 	.word	0x20000000
 80002a8:	200000d8 	.word	0x200000d8

080002ac <segmentUpdateAuto>:
int man_Grn = 1;

int horCount = 0;
int verCount = 0;
int scan = 0;
void segmentUpdateAuto(){ //update cho trang thai tu dong
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	updateSegment2Digits(horCount, verCount);
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <segmentUpdateAuto+0x18>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <segmentUpdateAuto+0x1c>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	4611      	mov	r1, r2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ffee 	bl	800129c <updateSegment2Digits>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000e4 	.word	0x200000e4
 80002c8:	200000e8 	.word	0x200000e8

080002cc <fsm_run>:
void fsm_run(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	fsm_auto_hor();
 80002d0:	f000 f84c 	bl	800036c <fsm_auto_hor>
	fsm_auto_ver();
 80002d4:	f000 f99a 	bl	800060c <fsm_auto_ver>
	fsm_man();
 80002d8:	f000 fa82 	bl	80007e0 <fsm_man>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <button0_Signal>:
void button0_Signal(){ //first button pressed
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (isButtonNoPressed(0) == 1) {
 80002e4:	2000      	movs	r0, #0
 80002e6:	f7ff ff31 	bl	800014c <isButtonNoPressed>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d130      	bne.n	8000352 <button0_Signal+0x72>
	resetTimer(-1); // reset all state
 80002f0:	f04f 30ff 	mov.w	r0, #4294967295
 80002f4:	f001 f928 	bl	8001548 <resetTimer>
	horCount = 0;
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <button0_Signal+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
	verCount = 0;
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <button0_Signal+0x78>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
	updateSegment(IDLE, IDLE, IDLE, IDLE);
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
 8000308:	f04f 32ff 	mov.w	r2, #4294967295
 800030c:	f04f 31ff 	mov.w	r1, #4294967295
 8000310:	f04f 30ff 	mov.w	r0, #4294967295
 8000314:	f000 ff7a 	bl	800120c <updateSegment>
	scan = 0;
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <button0_Signal+0x7c>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
	setLedH(IDLE);
 800031e:	f04f 30ff 	mov.w	r0, #4294967295
 8000322:	f000 fc21 	bl	8000b68 <setLedH>
	setLedV(IDLE);
 8000326:	f04f 30ff 	mov.w	r0, #4294967295
 800032a:	f000 fccf 	bl	8000ccc <setLedV>
	autoStateH = IDLE;
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <button0_Signal+0x80>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295
 8000334:	601a      	str	r2, [r3, #0]
	autoStateV = IDLE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <button0_Signal+0x84>)
 8000338:	f04f 32ff 	mov.w	r2, #4294967295
 800033c:	601a      	str	r2, [r3, #0]
	man_state = MAN_RED; //manual cua red vao dau tien
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <button0_Signal+0x88>)
 8000340:	220a      	movs	r2, #10
 8000342:	601a      	str	r2, [r3, #0]
	set1(100);
 8000344:	2064      	movs	r0, #100	; 0x64
 8000346:	f001 f873 	bl	8001430 <set1>
	set3(100);
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f001 f8a8 	bl	80014a0 <set3>
	return;
 8000350:	bf00      	nop
	}
}
 8000352:	bd80      	pop	{r7, pc}
 8000354:	200000e4 	.word	0x200000e4
 8000358:	200000e8 	.word	0x200000e8
 800035c:	200000ec 	.word	0x200000ec
 8000360:	2000003c 	.word	0x2000003c
 8000364:	20000040 	.word	0x20000040
 8000368:	20000044 	.word	0x20000044

0800036c <fsm_auto_hor>:
void fsm_auto_hor(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	switch(autoStateH){
 8000370:	4b9c      	ldr	r3, [pc, #624]	; (80005e4 <fsm_auto_hor+0x278>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3b01      	subs	r3, #1
 8000376:	2b1e      	cmp	r3, #30
 8000378:	f200 8130 	bhi.w	80005dc <fsm_auto_hor+0x270>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <fsm_auto_hor+0x18>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	08000401 	.word	0x08000401
 8000388:	080005dd 	.word	0x080005dd
 800038c:	080005dd 	.word	0x080005dd
 8000390:	080005dd 	.word	0x080005dd
 8000394:	080005dd 	.word	0x080005dd
 8000398:	080005dd 	.word	0x080005dd
 800039c:	080005dd 	.word	0x080005dd
 80003a0:	080005dd 	.word	0x080005dd
 80003a4:	080005dd 	.word	0x080005dd
 80003a8:	080005dd 	.word	0x080005dd
 80003ac:	08000433 	.word	0x08000433
 80003b0:	080005dd 	.word	0x080005dd
 80003b4:	080005dd 	.word	0x080005dd
 80003b8:	080005dd 	.word	0x080005dd
 80003bc:	080005dd 	.word	0x080005dd
 80003c0:	080005dd 	.word	0x080005dd
 80003c4:	080005dd 	.word	0x080005dd
 80003c8:	080005dd 	.word	0x080005dd
 80003cc:	080005dd 	.word	0x080005dd
 80003d0:	080005dd 	.word	0x080005dd
 80003d4:	0800054f 	.word	0x0800054f
 80003d8:	080005dd 	.word	0x080005dd
 80003dc:	080005dd 	.word	0x080005dd
 80003e0:	080005dd 	.word	0x080005dd
 80003e4:	080005dd 	.word	0x080005dd
 80003e8:	080005dd 	.word	0x080005dd
 80003ec:	080005dd 	.word	0x080005dd
 80003f0:	080005dd 	.word	0x080005dd
 80003f4:	080005dd 	.word	0x080005dd
 80003f8:	080005dd 	.word	0x080005dd
 80003fc:	080004c1 	.word	0x080004c1
		case INIT:
			set1(red_duration*1000); //timer1 for hor state
 8000400:	4b79      	ldr	r3, [pc, #484]	; (80005e8 <fsm_auto_hor+0x27c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000408:	fb02 f303 	mul.w	r3, r2, r3
 800040c:	4618      	mov	r0, r3
 800040e:	f001 f80f 	bl	8001430 <set1>
			set2(1000); //for counter (1s)
 8000412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000416:	f001 f827 	bl	8001468 <set2>
			set3(100); //scanning LEDs
 800041a:	2064      	movs	r0, #100	; 0x64
 800041c:	f001 f840 	bl	80014a0 <set3>
			horCount = red_duration - 1;
 8000420:	4b71      	ldr	r3, [pc, #452]	; (80005e8 <fsm_auto_hor+0x27c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3b01      	subs	r3, #1
 8000426:	4a71      	ldr	r2, [pc, #452]	; (80005ec <fsm_auto_hor+0x280>)
 8000428:	6013      	str	r3, [r2, #0]
			autoStateH = RED;
 800042a:	4b6e      	ldr	r3, [pc, #440]	; (80005e4 <fsm_auto_hor+0x278>)
 800042c:	220b      	movs	r2, #11
 800042e:	601a      	str	r2, [r3, #0]
			break;
 8000430:	e0d5      	b.n	80005de <fsm_auto_hor+0x272>
		case RED:
			setLedH(RED);
 8000432:	200b      	movs	r0, #11
 8000434:	f000 fb98 	bl	8000b68 <setLedH>
			if(flag2 == 1){
 8000438:	4b6d      	ldr	r3, [pc, #436]	; (80005f0 <fsm_auto_hor+0x284>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d10f      	bne.n	8000460 <fsm_auto_hor+0xf4>
				horCount--;
 8000440:	4b6a      	ldr	r3, [pc, #424]	; (80005ec <fsm_auto_hor+0x280>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	4a69      	ldr	r2, [pc, #420]	; (80005ec <fsm_auto_hor+0x280>)
 8000448:	6013      	str	r3, [r2, #0]
				if(verCount < 0){verCount = 9;}
 800044a:	4b6a      	ldr	r3, [pc, #424]	; (80005f4 <fsm_auto_hor+0x288>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	da02      	bge.n	8000458 <fsm_auto_hor+0xec>
 8000452:	4b68      	ldr	r3, [pc, #416]	; (80005f4 <fsm_auto_hor+0x288>)
 8000454:	2209      	movs	r2, #9
 8000456:	601a      	str	r2, [r3, #0]
				set2(1000);
 8000458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045c:	f001 f804 	bl	8001468 <set2>
			}
		   if(flag1 == 1){
 8000460:	4b65      	ldr	r3, [pc, #404]	; (80005f8 <fsm_auto_hor+0x28c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d110      	bne.n	800048a <fsm_auto_hor+0x11e>
			  set1(green_duration*1000);
 8000468:	4b64      	ldr	r3, [pc, #400]	; (80005fc <fsm_auto_hor+0x290>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000470:	fb02 f303 	mul.w	r3, r2, r3
 8000474:	4618      	mov	r0, r3
 8000476:	f000 ffdb 	bl	8001430 <set1>
			  horCount = green_duration - 1;
 800047a:	4b60      	ldr	r3, [pc, #384]	; (80005fc <fsm_auto_hor+0x290>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a5a      	ldr	r2, [pc, #360]	; (80005ec <fsm_auto_hor+0x280>)
 8000482:	6013      	str	r3, [r2, #0]
			  autoStateH = GRN;
 8000484:	4b57      	ldr	r3, [pc, #348]	; (80005e4 <fsm_auto_hor+0x278>)
 8000486:	221f      	movs	r2, #31
 8000488:	601a      	str	r2, [r3, #0]
		   }
		   if(flag3 == 1){
 800048a:	4b5d      	ldr	r3, [pc, #372]	; (8000600 <fsm_auto_hor+0x294>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d113      	bne.n	80004ba <fsm_auto_hor+0x14e>
			   segmentUpdateAuto();
 8000492:	f7ff ff0b 	bl	80002ac <segmentUpdateAuto>
			   scan = (scan == 1) ? 0 : 1;
 8000496:	4b5b      	ldr	r3, [pc, #364]	; (8000604 <fsm_auto_hor+0x298>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	bf14      	ite	ne
 800049e:	2301      	movne	r3, #1
 80004a0:	2300      	moveq	r3, #0
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b57      	ldr	r3, [pc, #348]	; (8000604 <fsm_auto_hor+0x298>)
 80004a8:	601a      	str	r2, [r3, #0]
//			   scan = (scan + 1) % 2;
			   scanLED(scan);
 80004aa:	4b56      	ldr	r3, [pc, #344]	; (8000604 <fsm_auto_hor+0x298>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fe4e 	bl	8001150 <scanLED>
			   set3(100);
 80004b4:	2064      	movs	r0, #100	; 0x64
 80004b6:	f000 fff3 	bl	80014a0 <set3>
		   }
		   button0_Signal();
 80004ba:	f7ff ff11 	bl	80002e0 <button0_Signal>
		   break;
 80004be:	e08e      	b.n	80005de <fsm_auto_hor+0x272>
		case GRN:
			setLedH(GRN);
 80004c0:	201f      	movs	r0, #31
 80004c2:	f000 fb51 	bl	8000b68 <setLedH>
			if(flag2 == 1){
 80004c6:	4b4a      	ldr	r3, [pc, #296]	; (80005f0 <fsm_auto_hor+0x284>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d10f      	bne.n	80004ee <fsm_auto_hor+0x182>
			horCount--;
 80004ce:	4b47      	ldr	r3, [pc, #284]	; (80005ec <fsm_auto_hor+0x280>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	4a45      	ldr	r2, [pc, #276]	; (80005ec <fsm_auto_hor+0x280>)
 80004d6:	6013      	str	r3, [r2, #0]
			if(verCount < 0) {verCount = 9;}
 80004d8:	4b46      	ldr	r3, [pc, #280]	; (80005f4 <fsm_auto_hor+0x288>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da02      	bge.n	80004e6 <fsm_auto_hor+0x17a>
 80004e0:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <fsm_auto_hor+0x288>)
 80004e2:	2209      	movs	r2, #9
 80004e4:	601a      	str	r2, [r3, #0]
				set2(1000);
 80004e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ea:	f000 ffbd 	bl	8001468 <set2>
			}
			if(flag1 == 1){
 80004ee:	4b42      	ldr	r3, [pc, #264]	; (80005f8 <fsm_auto_hor+0x28c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d110      	bne.n	8000518 <fsm_auto_hor+0x1ac>
				set1(yel_duration*1000);
 80004f6:	4b44      	ldr	r3, [pc, #272]	; (8000608 <fsm_auto_hor+0x29c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	4618      	mov	r0, r3
 8000504:	f000 ff94 	bl	8001430 <set1>
				horCount = yel_duration - 1;
 8000508:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <fsm_auto_hor+0x29c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3b01      	subs	r3, #1
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <fsm_auto_hor+0x280>)
 8000510:	6013      	str	r3, [r2, #0]
				autoStateH = YEL;
 8000512:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <fsm_auto_hor+0x278>)
 8000514:	2215      	movs	r2, #21
 8000516:	601a      	str	r2, [r3, #0]
			}
			if(flag3 == 1){
 8000518:	4b39      	ldr	r3, [pc, #228]	; (8000600 <fsm_auto_hor+0x294>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d113      	bne.n	8000548 <fsm_auto_hor+0x1dc>
				segmentUpdateAuto();
 8000520:	f7ff fec4 	bl	80002ac <segmentUpdateAuto>
				scan = (scan == 1) ? 0 : 1;
 8000524:	4b37      	ldr	r3, [pc, #220]	; (8000604 <fsm_auto_hor+0x298>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	4b33      	ldr	r3, [pc, #204]	; (8000604 <fsm_auto_hor+0x298>)
 8000536:	601a      	str	r2, [r3, #0]
//				scan = (scan + 1) % 2;
				scanLED(scan);
 8000538:	4b32      	ldr	r3, [pc, #200]	; (8000604 <fsm_auto_hor+0x298>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fe07 	bl	8001150 <scanLED>
				set3(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 ffac 	bl	80014a0 <set3>
			}
			button0_Signal();
 8000548:	f7ff feca 	bl	80002e0 <button0_Signal>
			break;
 800054c:	e047      	b.n	80005de <fsm_auto_hor+0x272>
		case YEL:
					setLedH(YEL);
 800054e:	2015      	movs	r0, #21
 8000550:	f000 fb0a 	bl	8000b68 <setLedH>
					if(flag2 == 1){
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <fsm_auto_hor+0x284>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d10f      	bne.n	800057c <fsm_auto_hor+0x210>
					horCount--;
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <fsm_auto_hor+0x280>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	4a22      	ldr	r2, [pc, #136]	; (80005ec <fsm_auto_hor+0x280>)
 8000564:	6013      	str	r3, [r2, #0]
					if(verCount < 0) {verCount = 9;}
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <fsm_auto_hor+0x288>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	da02      	bge.n	8000574 <fsm_auto_hor+0x208>
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <fsm_auto_hor+0x288>)
 8000570:	2209      	movs	r2, #9
 8000572:	601a      	str	r2, [r3, #0]
					set2(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f000 ff76 	bl	8001468 <set2>
					}
					if(flag1 == 1){
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <fsm_auto_hor+0x28c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d110      	bne.n	80005a6 <fsm_auto_hor+0x23a>
						set1(red_duration*1000);
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <fsm_auto_hor+0x27c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058c:	fb02 f303 	mul.w	r3, r2, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f000 ff4d 	bl	8001430 <set1>
						horCount = red_duration - 1;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <fsm_auto_hor+0x27c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <fsm_auto_hor+0x280>)
 800059e:	6013      	str	r3, [r2, #0]
						autoStateH = RED;
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <fsm_auto_hor+0x278>)
 80005a2:	220b      	movs	r2, #11
 80005a4:	601a      	str	r2, [r3, #0]
					}
					if(flag3 == 1){
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <fsm_auto_hor+0x294>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d113      	bne.n	80005d6 <fsm_auto_hor+0x26a>
						segmentUpdateAuto();
 80005ae:	f7ff fe7d 	bl	80002ac <segmentUpdateAuto>
						scan = (scan == 1) ? 0 : 1;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <fsm_auto_hor+0x298>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <fsm_auto_hor+0x298>)
 80005c4:	601a      	str	r2, [r3, #0]
//						scan = (scan + 1) % 2;
						scanLED(scan);
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <fsm_auto_hor+0x298>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fdc0 	bl	8001150 <scanLED>
						set3(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f000 ff65 	bl	80014a0 <set3>
					}
					button0_Signal();
 80005d6:	f7ff fe83 	bl	80002e0 <button0_Signal>
					break;
 80005da:	e000      	b.n	80005de <fsm_auto_hor+0x272>
		default:
			break;
 80005dc:	bf00      	nop
	}

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000003c 	.word	0x2000003c
 80005e8:	20000048 	.word	0x20000048
 80005ec:	200000e4 	.word	0x200000e4
 80005f0:	20000120 	.word	0x20000120
 80005f4:	200000e8 	.word	0x200000e8
 80005f8:	2000011c 	.word	0x2000011c
 80005fc:	20000050 	.word	0x20000050
 8000600:	20000124 	.word	0x20000124
 8000604:	200000ec 	.word	0x200000ec
 8000608:	2000004c 	.word	0x2000004c

0800060c <fsm_auto_ver>:
void fsm_auto_ver(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	switch(autoStateV){
 8000610:	4b6c      	ldr	r3, [pc, #432]	; (80007c4 <fsm_auto_ver+0x1b8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	2b1e      	cmp	r3, #30
 8000618:	f200 80ca 	bhi.w	80007b0 <fsm_auto_ver+0x1a4>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <fsm_auto_ver+0x18>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	080006a1 	.word	0x080006a1
 8000628:	080007b1 	.word	0x080007b1
 800062c:	080007b1 	.word	0x080007b1
 8000630:	080007b1 	.word	0x080007b1
 8000634:	080007b1 	.word	0x080007b1
 8000638:	080007b1 	.word	0x080007b1
 800063c:	080007b1 	.word	0x080007b1
 8000640:	080007b1 	.word	0x080007b1
 8000644:	080007b1 	.word	0x080007b1
 8000648:	080007b1 	.word	0x080007b1
 800064c:	08000765 	.word	0x08000765
 8000650:	080007b1 	.word	0x080007b1
 8000654:	080007b1 	.word	0x080007b1
 8000658:	080007b1 	.word	0x080007b1
 800065c:	080007b1 	.word	0x080007b1
 8000660:	080007b1 	.word	0x080007b1
 8000664:	080007b1 	.word	0x080007b1
 8000668:	080007b1 	.word	0x080007b1
 800066c:	080007b1 	.word	0x080007b1
 8000670:	080007b1 	.word	0x080007b1
 8000674:	08000719 	.word	0x08000719
 8000678:	080007b1 	.word	0x080007b1
 800067c:	080007b1 	.word	0x080007b1
 8000680:	080007b1 	.word	0x080007b1
 8000684:	080007b1 	.word	0x080007b1
 8000688:	080007b1 	.word	0x080007b1
 800068c:	080007b1 	.word	0x080007b1
 8000690:	080007b1 	.word	0x080007b1
 8000694:	080007b1 	.word	0x080007b1
 8000698:	080007b1 	.word	0x080007b1
 800069c:	080006cd 	.word	0x080006cd
		case INIT:
			set4(green_duration*1000); //timer1 for ver state
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <fsm_auto_ver+0x1bc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a8:	fb02 f303 	mul.w	r3, r2, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ff13 	bl	80014d8 <set4>
			set5(1000); //for counter (1s)
 80006b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b6:	f000 ff2b 	bl	8001510 <set5>
			verCount = green_duration - 1;
 80006ba:	4b43      	ldr	r3, [pc, #268]	; (80007c8 <fsm_auto_ver+0x1bc>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a42      	ldr	r2, [pc, #264]	; (80007cc <fsm_auto_ver+0x1c0>)
 80006c2:	6013      	str	r3, [r2, #0]
			autoStateV = GRN;
 80006c4:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <fsm_auto_ver+0x1b8>)
 80006c6:	221f      	movs	r2, #31
 80006c8:	601a      	str	r2, [r3, #0]
			break;
 80006ca:	e078      	b.n	80007be <fsm_auto_ver+0x1b2>
		case GRN:
			setLedV(GRN);
 80006cc:	201f      	movs	r0, #31
 80006ce:	f000 fafd 	bl	8000ccc <setLedV>
			if(flag5 == 1){
 80006d2:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <fsm_auto_ver+0x1c4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d108      	bne.n	80006ec <fsm_auto_ver+0xe0>
				verCount--;
 80006da:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <fsm_auto_ver+0x1c0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a3a      	ldr	r2, [pc, #232]	; (80007cc <fsm_auto_ver+0x1c0>)
 80006e2:	6013      	str	r3, [r2, #0]
				set5(1000);
 80006e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e8:	f000 ff12 	bl	8001510 <set5>
			}
		   if(flag4 == 1){
 80006ec:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <fsm_auto_ver+0x1c8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d15f      	bne.n	80007b4 <fsm_auto_ver+0x1a8>
			  set4(yel_duration*1000);
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <fsm_auto_ver+0x1cc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006fc:	fb02 f303 	mul.w	r3, r2, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fee9 	bl	80014d8 <set4>
			  verCount = yel_duration - 1;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <fsm_auto_ver+0x1cc>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3b01      	subs	r3, #1
 800070c:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <fsm_auto_ver+0x1c0>)
 800070e:	6013      	str	r3, [r2, #0]
			  autoStateV = YEL;
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <fsm_auto_ver+0x1b8>)
 8000712:	2215      	movs	r2, #21
 8000714:	601a      	str	r2, [r3, #0]
		   }
		   break;
 8000716:	e04d      	b.n	80007b4 <fsm_auto_ver+0x1a8>
		case YEL:
			setLedV(YEL);
 8000718:	2015      	movs	r0, #21
 800071a:	f000 fad7 	bl	8000ccc <setLedV>
			if(flag5 == 1){
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <fsm_auto_ver+0x1c4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d108      	bne.n	8000738 <fsm_auto_ver+0x12c>
				verCount--;
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <fsm_auto_ver+0x1c0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <fsm_auto_ver+0x1c0>)
 800072e:	6013      	str	r3, [r2, #0]
				set5(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 feec 	bl	8001510 <set5>
			}
			if(flag4 == 1){
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <fsm_auto_ver+0x1c8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d13b      	bne.n	80007b8 <fsm_auto_ver+0x1ac>
				set4(red_duration*1000);
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <fsm_auto_ver+0x1d0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fec3 	bl	80014d8 <set4>
				verCount = red_duration - 1;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <fsm_auto_ver+0x1d0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <fsm_auto_ver+0x1c0>)
 800075a:	6013      	str	r3, [r2, #0]
				autoStateV = RED;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <fsm_auto_ver+0x1b8>)
 800075e:	220b      	movs	r2, #11
 8000760:	601a      	str	r2, [r3, #0]
			}
			break;
 8000762:	e029      	b.n	80007b8 <fsm_auto_ver+0x1ac>
		case RED:
					setLedV(RED);
 8000764:	200b      	movs	r0, #11
 8000766:	f000 fab1 	bl	8000ccc <setLedV>
					if(flag5 == 1){
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <fsm_auto_ver+0x1c4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d108      	bne.n	8000784 <fsm_auto_ver+0x178>
						verCount--;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <fsm_auto_ver+0x1c0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <fsm_auto_ver+0x1c0>)
 800077a:	6013      	str	r3, [r2, #0]
						set5(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000780:	f000 fec6 	bl	8001510 <set5>
					}
					if(flag4 == 1){
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <fsm_auto_ver+0x1c8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d117      	bne.n	80007bc <fsm_auto_ver+0x1b0>
						set4(green_duration*1000);
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <fsm_auto_ver+0x1bc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fe9d 	bl	80014d8 <set4>
						verCount = green_duration - 1;
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <fsm_auto_ver+0x1bc>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <fsm_auto_ver+0x1c0>)
 80007a6:	6013      	str	r3, [r2, #0]
						autoStateV = GRN;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <fsm_auto_ver+0x1b8>)
 80007aa:	221f      	movs	r2, #31
 80007ac:	601a      	str	r2, [r3, #0]
					}
					break;
 80007ae:	e005      	b.n	80007bc <fsm_auto_ver+0x1b0>
		default:
			break;
 80007b0:	bf00      	nop
 80007b2:	e004      	b.n	80007be <fsm_auto_ver+0x1b2>
		   break;
 80007b4:	bf00      	nop
 80007b6:	e002      	b.n	80007be <fsm_auto_ver+0x1b2>
			break;
 80007b8:	bf00      	nop
 80007ba:	e000      	b.n	80007be <fsm_auto_ver+0x1b2>
					break;
 80007bc:	bf00      	nop
	}
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000040 	.word	0x20000040
 80007c8:	20000050 	.word	0x20000050
 80007cc:	200000e8 	.word	0x200000e8
 80007d0:	2000012c 	.word	0x2000012c
 80007d4:	20000128 	.word	0x20000128
 80007d8:	2000004c 	.word	0x2000004c
 80007dc:	20000048 	.word	0x20000048

080007e0 <fsm_man>:
void fsm_man() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
    switch (man_state) {
 80007e6:	4bac      	ldr	r3, [pc, #688]	; (8000a98 <fsm_man+0x2b8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b1e      	cmp	r3, #30
 80007ec:	f000 80d4 	beq.w	8000998 <fsm_man+0x1b8>
 80007f0:	2b1e      	cmp	r3, #30
 80007f2:	f300 81a2 	bgt.w	8000b3a <fsm_man+0x35a>
 80007f6:	2b0a      	cmp	r3, #10
 80007f8:	d002      	beq.n	8000800 <fsm_man+0x20>
 80007fa:	2b14      	cmp	r3, #20
 80007fc:	d066      	beq.n	80008cc <fsm_man+0xec>
        	            	set3(100);
        	            }
            break;

        default:
            break;
 80007fe:	e19c      	b.n	8000b3a <fsm_man+0x35a>
        	updateSegment2Digits(man_Red, 2); //gtri va mode
 8000800:	4ba6      	ldr	r3, [pc, #664]	; (8000a9c <fsm_man+0x2bc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fd48 	bl	800129c <updateSegment2Digits>
        	if(isButtonNoPressed(0) == 1){
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fc9d 	bl	800014c <isButtonNoPressed>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d113      	bne.n	8000840 <fsm_man+0x60>
        		man_Yel = 1;
 8000818:	4ba1      	ldr	r3, [pc, #644]	; (8000aa0 <fsm_man+0x2c0>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
        		man_state = MAN_YEL;
 800081e:	4b9e      	ldr	r3, [pc, #632]	; (8000a98 <fsm_man+0x2b8>)
 8000820:	2214      	movs	r2, #20
 8000822:	601a      	str	r2, [r3, #0]
        		setLedH(IDLE);
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f000 f99e 	bl	8000b68 <setLedH>
        		setLedV(IDLE);
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 fa4c 	bl	8000ccc <setLedV>
        		set1(100); //for next state
 8000834:	2064      	movs	r0, #100	; 0x64
 8000836:	f000 fdfb 	bl	8001430 <set1>
        		set3(100);	//scan led
 800083a:	2064      	movs	r0, #100	; 0x64
 800083c:	f000 fe30 	bl	80014a0 <set3>
        	if(isButtonNoPressed(1) == 1){
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fc83 	bl	800014c <isButtonNoPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d10a      	bne.n	8000862 <fsm_man+0x82>
        		man_Red = (man_Red == 99 ) ? 1 : man_Red + 1;
 800084c:	4b93      	ldr	r3, [pc, #588]	; (8000a9c <fsm_man+0x2bc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b63      	cmp	r3, #99	; 0x63
 8000852:	d003      	beq.n	800085c <fsm_man+0x7c>
 8000854:	4b91      	ldr	r3, [pc, #580]	; (8000a9c <fsm_man+0x2bc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	e000      	b.n	800085e <fsm_man+0x7e>
 800085c:	2301      	movs	r3, #1
 800085e:	4a8f      	ldr	r2, [pc, #572]	; (8000a9c <fsm_man+0x2bc>)
 8000860:	6013      	str	r3, [r2, #0]
            if(isButtonNoPressed(2) == 1){
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff fc72 	bl	800014c <isButtonNoPressed>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d106      	bne.n	800087c <fsm_man+0x9c>
            	red_duration = man_Red;
 800086e:	4b8b      	ldr	r3, [pc, #556]	; (8000a9c <fsm_man+0x2bc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a8c      	ldr	r2, [pc, #560]	; (8000aa4 <fsm_man+0x2c4>)
 8000874:	6013      	str	r3, [r2, #0]
            	man_Red = 1;
 8000876:	4b89      	ldr	r3, [pc, #548]	; (8000a9c <fsm_man+0x2bc>)
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
            if(flag1 == 1){
 800087c:	4b8a      	ldr	r3, [pc, #552]	; (8000aa8 <fsm_man+0x2c8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d10b      	bne.n	800089c <fsm_man+0xbc>
            	HAL_GPIO_TogglePin(red_h_GPIO_Port, red_h_Pin);
 8000884:	2102      	movs	r1, #2
 8000886:	4889      	ldr	r0, [pc, #548]	; (8000aac <fsm_man+0x2cc>)
 8000888:	f001 faa9 	bl	8001dde <HAL_GPIO_TogglePin>
            	HAL_GPIO_TogglePin(red_v_GPIO_Port, red_v_Pin);
 800088c:	2110      	movs	r1, #16
 800088e:	4887      	ldr	r0, [pc, #540]	; (8000aac <fsm_man+0x2cc>)
 8000890:	f001 faa5 	bl	8001dde <HAL_GPIO_TogglePin>
            	set1(500); //2hz la 0.5s
 8000894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000898:	f000 fdca 	bl	8001430 <set1>
            if(flag3 == 1){
 800089c:	4b84      	ldr	r3, [pc, #528]	; (8000ab0 <fsm_man+0x2d0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	f040 814c 	bne.w	8000b3e <fsm_man+0x35e>
            	scan = (scan + 1)%2;
 80008a6:	4b83      	ldr	r3, [pc, #524]	; (8000ab4 <fsm_man+0x2d4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	bfb8      	it	lt
 80008b4:	425b      	neglt	r3, r3
 80008b6:	4a7f      	ldr	r2, [pc, #508]	; (8000ab4 <fsm_man+0x2d4>)
 80008b8:	6013      	str	r3, [r2, #0]
            	scanLED(scan);
 80008ba:	4b7e      	ldr	r3, [pc, #504]	; (8000ab4 <fsm_man+0x2d4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fc46 	bl	8001150 <scanLED>
            	set3(100);
 80008c4:	2064      	movs	r0, #100	; 0x64
 80008c6:	f000 fdeb 	bl	80014a0 <set3>
            break;
 80008ca:	e138      	b.n	8000b3e <fsm_man+0x35e>
        	updateSegment2Digits(man_Yel, 3); //gtri va mode
 80008cc:	4b74      	ldr	r3, [pc, #464]	; (8000aa0 <fsm_man+0x2c0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2103      	movs	r1, #3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fce2 	bl	800129c <updateSegment2Digits>
        	        	if(isButtonNoPressed(0)== 1){
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fc37 	bl	800014c <isButtonNoPressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d113      	bne.n	800090c <fsm_man+0x12c>
        	        		man_Grn = 1;
 80008e4:	4b74      	ldr	r3, [pc, #464]	; (8000ab8 <fsm_man+0x2d8>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
        	        		man_state = MAN_GRN;
 80008ea:	4b6b      	ldr	r3, [pc, #428]	; (8000a98 <fsm_man+0x2b8>)
 80008ec:	221e      	movs	r2, #30
 80008ee:	601a      	str	r2, [r3, #0]
        	        		setLedH(IDLE);
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f938 	bl	8000b68 <setLedH>
        	        		setLedV(IDLE);
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f9e6 	bl	8000ccc <setLedV>
        	        		set1(100); //for next state
 8000900:	2064      	movs	r0, #100	; 0x64
 8000902:	f000 fd95 	bl	8001430 <set1>
        	        		set3(100);	//scan led
 8000906:	2064      	movs	r0, #100	; 0x64
 8000908:	f000 fdca 	bl	80014a0 <set3>
        	        	if(isButtonNoPressed(1) == 1){
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fc1d 	bl	800014c <isButtonNoPressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d10a      	bne.n	800092e <fsm_man+0x14e>
        	        		man_Yel = (man_Yel== 99 ) ? 1 : man_Yel + 1;
 8000918:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <fsm_man+0x2c0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b63      	cmp	r3, #99	; 0x63
 800091e:	d003      	beq.n	8000928 <fsm_man+0x148>
 8000920:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <fsm_man+0x2c0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	e000      	b.n	800092a <fsm_man+0x14a>
 8000928:	2301      	movs	r3, #1
 800092a:	4a5d      	ldr	r2, [pc, #372]	; (8000aa0 <fsm_man+0x2c0>)
 800092c:	6013      	str	r3, [r2, #0]
        	            if(isButtonNoPressed(2)== 1){
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fc0c 	bl	800014c <isButtonNoPressed>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d106      	bne.n	8000948 <fsm_man+0x168>
        	            	yel_duration = man_Yel;
 800093a:	4b59      	ldr	r3, [pc, #356]	; (8000aa0 <fsm_man+0x2c0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a5f      	ldr	r2, [pc, #380]	; (8000abc <fsm_man+0x2dc>)
 8000940:	6013      	str	r3, [r2, #0]
        	            	man_Yel = 1;
 8000942:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <fsm_man+0x2c0>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
        	            if(flag1 == 1){
 8000948:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <fsm_man+0x2c8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d10b      	bne.n	8000968 <fsm_man+0x188>
        	            	HAL_GPIO_TogglePin(yel_h_GPIO_Port, yel_h_Pin);
 8000950:	2104      	movs	r1, #4
 8000952:	4856      	ldr	r0, [pc, #344]	; (8000aac <fsm_man+0x2cc>)
 8000954:	f001 fa43 	bl	8001dde <HAL_GPIO_TogglePin>
        	            	HAL_GPIO_TogglePin(yel_v_GPIO_Port, yel_v_Pin);
 8000958:	2120      	movs	r1, #32
 800095a:	4854      	ldr	r0, [pc, #336]	; (8000aac <fsm_man+0x2cc>)
 800095c:	f001 fa3f 	bl	8001dde <HAL_GPIO_TogglePin>
        	            	set1(500); //2hz la 0.5s
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f000 fd64 	bl	8001430 <set1>
        	            if(flag3 == 1){
 8000968:	4b51      	ldr	r3, [pc, #324]	; (8000ab0 <fsm_man+0x2d0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	f040 80e8 	bne.w	8000b42 <fsm_man+0x362>
        	            	scan = (scan + 1)%2;
 8000972:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <fsm_man+0x2d4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	bfb8      	it	lt
 8000980:	425b      	neglt	r3, r3
 8000982:	4a4c      	ldr	r2, [pc, #304]	; (8000ab4 <fsm_man+0x2d4>)
 8000984:	6013      	str	r3, [r2, #0]
        	            	scanLED(scan);
 8000986:	4b4b      	ldr	r3, [pc, #300]	; (8000ab4 <fsm_man+0x2d4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fbe0 	bl	8001150 <scanLED>
        	            	set3(100);
 8000990:	2064      	movs	r0, #100	; 0x64
 8000992:	f000 fd85 	bl	80014a0 <set3>
            break;
 8000996:	e0d4      	b.n	8000b42 <fsm_man+0x362>
        	updateSegment2Digits(man_Grn, 4);
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <fsm_man+0x2d8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2104      	movs	r1, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fc7c 	bl	800129c <updateSegment2Digits>
        	        	if(isButtonNoPressed(0)== 1){
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fbd1 	bl	800014c <isButtonNoPressed>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d165      	bne.n	8000a7c <fsm_man+0x29c>
        	        		if (yel_duration > green_duration){
 80009b0:	4b42      	ldr	r3, [pc, #264]	; (8000abc <fsm_man+0x2dc>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <fsm_man+0x2e0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dd06      	ble.n	80009ca <fsm_man+0x1ea>
        	        		    green_duration += yel_duration;
 80009bc:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <fsm_man+0x2e0>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <fsm_man+0x2dc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a3e      	ldr	r2, [pc, #248]	; (8000ac0 <fsm_man+0x2e0>)
 80009c8:	6013      	str	r3, [r2, #0]
        	        		if (red_duration < green_duration + yel_duration){
 80009ca:	4b3d      	ldr	r3, [pc, #244]	; (8000ac0 <fsm_man+0x2e0>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <fsm_man+0x2dc>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	441a      	add	r2, r3
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <fsm_man+0x2c4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dd06      	ble.n	80009ea <fsm_man+0x20a>
        	        		    red_duration = green_duration + yel_duration;
 80009dc:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <fsm_man+0x2e0>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b36      	ldr	r3, [pc, #216]	; (8000abc <fsm_man+0x2dc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <fsm_man+0x2c4>)
 80009e8:	6013      	str	r3, [r2, #0]
        	        		if (green_duration >= red_duration + yel_duration){
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <fsm_man+0x2c4>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <fsm_man+0x2dc>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	441a      	add	r2, r3
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <fsm_man+0x2e0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dc06      	bgt.n	8000a0a <fsm_man+0x22a>
        	        		    green_duration = red_duration - yel_duration;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <fsm_man+0x2c4>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <fsm_man+0x2dc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4a2e      	ldr	r2, [pc, #184]	; (8000ac0 <fsm_man+0x2e0>)
 8000a08:	6013      	str	r3, [r2, #0]
        	        		setLedH(ALL);
 8000a0a:	2029      	movs	r0, #41	; 0x29
 8000a0c:	f000 f8ac 	bl	8000b68 <setLedH>
        	        		setLedV(ALL);
 8000a10:	2029      	movs	r0, #41	; 0x29
 8000a12:	f000 f95b 	bl	8000ccc <setLedV>
        	        		set7SegH(0);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 fb0e 	bl	8001038 <set7SegH>
        	        		set7SegV(0);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 fb51 	bl	80010c4 <set7SegV>
        	        		for (int i = 0; i < 4; i++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	e00c      	b.n	8000a42 <fsm_man+0x262>
        	        			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin << i, 0);
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	481d      	ldr	r0, [pc, #116]	; (8000aac <fsm_man+0x2cc>)
 8000a38:	f001 f9b9 	bl	8001dae <HAL_GPIO_WritePin>
        	        		for (int i = 0; i < 4; i++) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	ddef      	ble.n	8000a28 <fsm_man+0x248>
        	        		HAL_Delay(2000);
 8000a48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a4c:	f000 feec 	bl	8001828 <HAL_Delay>
        	        		setLedH(IDLE);
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f888 	bl	8000b68 <setLedH>
        	        		setLedV(IDLE);
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f936 	bl	8000ccc <setLedV>
        	        		resetTimer(NONE);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fd71 	bl	8001548 <resetTimer>
        	        		man_state = IDLE;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <fsm_man+0x2b8>)
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	601a      	str	r2, [r3, #0]
        	        		autoStateH = INIT;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <fsm_man+0x2e4>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
        	        		autoStateV = INIT;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <fsm_man+0x2e8>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
        	        		return;
 8000a7a:	e065      	b.n	8000b48 <fsm_man+0x368>
        	        	if(isButtonNoPressed(1)== 1){
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff fb65 	bl	800014c <isButtonNoPressed>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d124      	bne.n	8000ad2 <fsm_man+0x2f2>
        	        		man_Grn = (man_Grn == 99 ) ? 1 : man_Grn + 1;
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <fsm_man+0x2d8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b63      	cmp	r3, #99	; 0x63
 8000a8e:	d01d      	beq.n	8000acc <fsm_man+0x2ec>
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <fsm_man+0x2d8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	e01a      	b.n	8000ace <fsm_man+0x2ee>
 8000a98:	20000044 	.word	0x20000044
 8000a9c:	20000054 	.word	0x20000054
 8000aa0:	20000058 	.word	0x20000058
 8000aa4:	20000048 	.word	0x20000048
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	20000124 	.word	0x20000124
 8000ab4:	200000ec 	.word	0x200000ec
 8000ab8:	2000005c 	.word	0x2000005c
 8000abc:	2000004c 	.word	0x2000004c
 8000ac0:	20000050 	.word	0x20000050
 8000ac4:	2000003c 	.word	0x2000003c
 8000ac8:	20000040 	.word	0x20000040
 8000acc:	2301      	movs	r3, #1
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <fsm_man+0x370>)
 8000ad0:	6013      	str	r3, [r2, #0]
        	            if(isButtonNoPressed(2) == 1){
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f7ff fb3a 	bl	800014c <isButtonNoPressed>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d106      	bne.n	8000aec <fsm_man+0x30c>
        	            	green_duration = man_Grn;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <fsm_man+0x370>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <fsm_man+0x374>)
 8000ae4:	6013      	str	r3, [r2, #0]
        	            	man_Grn = 1;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <fsm_man+0x370>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
        	            if(flag1 == 1){
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <fsm_man+0x378>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10b      	bne.n	8000b0c <fsm_man+0x32c>
        	            	HAL_GPIO_TogglePin(grn_h_GPIO_Port, grn_h_Pin);
 8000af4:	2108      	movs	r1, #8
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <fsm_man+0x37c>)
 8000af8:	f001 f971 	bl	8001dde <HAL_GPIO_TogglePin>
        	            	HAL_GPIO_TogglePin(grn_v_GPIO_Port, grn_v_Pin);
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4817      	ldr	r0, [pc, #92]	; (8000b5c <fsm_man+0x37c>)
 8000b00:	f001 f96d 	bl	8001dde <HAL_GPIO_TogglePin>
        	            	set1(500); //2hz la 0.5s
 8000b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b08:	f000 fc92 	bl	8001430 <set1>
        	            if(flag3 == 1){
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <fsm_man+0x380>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d118      	bne.n	8000b46 <fsm_man+0x366>
        	            	scan = (scan + 1)%2;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <fsm_man+0x384>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <fsm_man+0x384>)
 8000b26:	6013      	str	r3, [r2, #0]
        	            	scanLED(scan);
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <fsm_man+0x384>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fb0f 	bl	8001150 <scanLED>
        	            	set3(100);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 fcb4 	bl	80014a0 <set3>
            break;
 8000b38:	e005      	b.n	8000b46 <fsm_man+0x366>
            break;
 8000b3a:	bf00      	nop
 8000b3c:	e004      	b.n	8000b48 <fsm_man+0x368>
            break;
 8000b3e:	bf00      	nop
 8000b40:	e002      	b.n	8000b48 <fsm_man+0x368>
            break;
 8000b42:	bf00      	nop
 8000b44:	e000      	b.n	8000b48 <fsm_man+0x368>
            break;
 8000b46:	bf00      	nop
    }
}
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000005c 	.word	0x2000005c
 8000b54:	20000050 	.word	0x20000050
 8000b58:	2000011c 	.word	0x2000011c
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	20000124 	.word	0x20000124
 8000b64:	200000ec 	.word	0x200000ec

08000b68 <setLedH>:
 */

#include "led.h"
int horState = NONE;
int verState = NONE;
void setLedH(int color){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b0b      	subs	r3, #11
 8000b74:	2b1e      	cmp	r3, #30
 8000b76:	f200 808d 	bhi.w	8000c94 <setLedH+0x12c>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <setLedH+0x18>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000bfd 	.word	0x08000bfd
 8000b84:	08000c95 	.word	0x08000c95
 8000b88:	08000c95 	.word	0x08000c95
 8000b8c:	08000c95 	.word	0x08000c95
 8000b90:	08000c95 	.word	0x08000c95
 8000b94:	08000c95 	.word	0x08000c95
 8000b98:	08000c95 	.word	0x08000c95
 8000b9c:	08000c95 	.word	0x08000c95
 8000ba0:	08000c95 	.word	0x08000c95
 8000ba4:	08000c95 	.word	0x08000c95
 8000ba8:	08000c23 	.word	0x08000c23
 8000bac:	08000c95 	.word	0x08000c95
 8000bb0:	08000c95 	.word	0x08000c95
 8000bb4:	08000c95 	.word	0x08000c95
 8000bb8:	08000c95 	.word	0x08000c95
 8000bbc:	08000c95 	.word	0x08000c95
 8000bc0:	08000c95 	.word	0x08000c95
 8000bc4:	08000c95 	.word	0x08000c95
 8000bc8:	08000c95 	.word	0x08000c95
 8000bcc:	08000c95 	.word	0x08000c95
 8000bd0:	08000c49 	.word	0x08000c49
 8000bd4:	08000c95 	.word	0x08000c95
 8000bd8:	08000c95 	.word	0x08000c95
 8000bdc:	08000c95 	.word	0x08000c95
 8000be0:	08000c95 	.word	0x08000c95
 8000be4:	08000c95 	.word	0x08000c95
 8000be8:	08000c95 	.word	0x08000c95
 8000bec:	08000c95 	.word	0x08000c95
 8000bf0:	08000c95 	.word	0x08000c95
 8000bf4:	08000c95 	.word	0x08000c95
 8000bf8:	08000c6f 	.word	0x08000c6f
	switch(color){
		case RED:
			HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_ON);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4830      	ldr	r0, [pc, #192]	; (8000cc4 <setLedH+0x15c>)
 8000c02:	f001 f8d4 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_OFF);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2104      	movs	r1, #4
 8000c0a:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <setLedH+0x15c>)
 8000c0c:	f001 f8cf 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_OFF);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2108      	movs	r1, #8
 8000c14:	482b      	ldr	r0, [pc, #172]	; (8000cc4 <setLedH+0x15c>)
 8000c16:	f001 f8ca 	bl	8001dae <HAL_GPIO_WritePin>
			horState = RED;
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <setLedH+0x160>)
 8000c1c:	220b      	movs	r2, #11
 8000c1e:	601a      	str	r2, [r3, #0]
			break;
 8000c20:	e04b      	b.n	8000cba <setLedH+0x152>
		case YEL:
			HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_OFF);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2102      	movs	r1, #2
 8000c26:	4827      	ldr	r0, [pc, #156]	; (8000cc4 <setLedH+0x15c>)
 8000c28:	f001 f8c1 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_ON);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4824      	ldr	r0, [pc, #144]	; (8000cc4 <setLedH+0x15c>)
 8000c32:	f001 f8bc 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_OFF);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2108      	movs	r1, #8
 8000c3a:	4822      	ldr	r0, [pc, #136]	; (8000cc4 <setLedH+0x15c>)
 8000c3c:	f001 f8b7 	bl	8001dae <HAL_GPIO_WritePin>
			horState = YEL;
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <setLedH+0x160>)
 8000c42:	2215      	movs	r2, #21
 8000c44:	601a      	str	r2, [r3, #0]
			break;
 8000c46:	e038      	b.n	8000cba <setLedH+0x152>
		case GRN:
			HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_OFF);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <setLedH+0x15c>)
 8000c4e:	f001 f8ae 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_OFF);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2104      	movs	r1, #4
 8000c56:	481b      	ldr	r0, [pc, #108]	; (8000cc4 <setLedH+0x15c>)
 8000c58:	f001 f8a9 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_ON);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2108      	movs	r1, #8
 8000c60:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <setLedH+0x15c>)
 8000c62:	f001 f8a4 	bl	8001dae <HAL_GPIO_WritePin>
			horState = GRN;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <setLedH+0x160>)
 8000c68:	221f      	movs	r2, #31
 8000c6a:	601a      	str	r2, [r3, #0]
			break;
 8000c6c:	e025      	b.n	8000cba <setLedH+0x152>
		case ALL:
			HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_ON);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2102      	movs	r1, #2
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <setLedH+0x15c>)
 8000c74:	f001 f89b 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_ON);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <setLedH+0x15c>)
 8000c7e:	f001 f896 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_ON);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2108      	movs	r1, #8
 8000c86:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <setLedH+0x15c>)
 8000c88:	f001 f891 	bl	8001dae <HAL_GPIO_WritePin>
			horState = ALL;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <setLedH+0x160>)
 8000c8e:	2229      	movs	r2, #41	; 0x29
 8000c90:	601a      	str	r2, [r3, #0]
			break;
 8000c92:	e012      	b.n	8000cba <setLedH+0x152>
		default:
			HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_OFF);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2102      	movs	r1, #2
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <setLedH+0x15c>)
 8000c9a:	f001 f888 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_OFF);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <setLedH+0x15c>)
 8000ca4:	f001 f883 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_OFF);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2108      	movs	r1, #8
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <setLedH+0x15c>)
 8000cae:	f001 f87e 	bl	8001dae <HAL_GPIO_WritePin>
			horState = NONE;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <setLedH+0x160>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
			break;
 8000cb8:	bf00      	nop
	}

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	200000f0 	.word	0x200000f0

08000ccc <setLedV>:
void setLedV(int color){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b0b      	subs	r3, #11
 8000cd8:	2b1e      	cmp	r3, #30
 8000cda:	f200 808d 	bhi.w	8000df8 <setLedV+0x12c>
 8000cde:	a201      	add	r2, pc, #4	; (adr r2, 8000ce4 <setLedV+0x18>)
 8000ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce4:	08000d61 	.word	0x08000d61
 8000ce8:	08000df9 	.word	0x08000df9
 8000cec:	08000df9 	.word	0x08000df9
 8000cf0:	08000df9 	.word	0x08000df9
 8000cf4:	08000df9 	.word	0x08000df9
 8000cf8:	08000df9 	.word	0x08000df9
 8000cfc:	08000df9 	.word	0x08000df9
 8000d00:	08000df9 	.word	0x08000df9
 8000d04:	08000df9 	.word	0x08000df9
 8000d08:	08000df9 	.word	0x08000df9
 8000d0c:	08000d87 	.word	0x08000d87
 8000d10:	08000df9 	.word	0x08000df9
 8000d14:	08000df9 	.word	0x08000df9
 8000d18:	08000df9 	.word	0x08000df9
 8000d1c:	08000df9 	.word	0x08000df9
 8000d20:	08000df9 	.word	0x08000df9
 8000d24:	08000df9 	.word	0x08000df9
 8000d28:	08000df9 	.word	0x08000df9
 8000d2c:	08000df9 	.word	0x08000df9
 8000d30:	08000df9 	.word	0x08000df9
 8000d34:	08000dad 	.word	0x08000dad
 8000d38:	08000df9 	.word	0x08000df9
 8000d3c:	08000df9 	.word	0x08000df9
 8000d40:	08000df9 	.word	0x08000df9
 8000d44:	08000df9 	.word	0x08000df9
 8000d48:	08000df9 	.word	0x08000df9
 8000d4c:	08000df9 	.word	0x08000df9
 8000d50:	08000df9 	.word	0x08000df9
 8000d54:	08000df9 	.word	0x08000df9
 8000d58:	08000df9 	.word	0x08000df9
 8000d5c:	08000dd3 	.word	0x08000dd3
	switch(color){
		case RED:
			HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_ON);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2110      	movs	r1, #16
 8000d64:	4830      	ldr	r0, [pc, #192]	; (8000e28 <setLedV+0x15c>)
 8000d66:	f001 f822 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_OFF);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	482e      	ldr	r0, [pc, #184]	; (8000e28 <setLedV+0x15c>)
 8000d70:	f001 f81d 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_OFF);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	482b      	ldr	r0, [pc, #172]	; (8000e28 <setLedV+0x15c>)
 8000d7a:	f001 f818 	bl	8001dae <HAL_GPIO_WritePin>
			verState = RED;
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <setLedV+0x160>)
 8000d80:	220b      	movs	r2, #11
 8000d82:	601a      	str	r2, [r3, #0]
			break;
 8000d84:	e04b      	b.n	8000e1e <setLedV+0x152>
		case YEL:
			HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_OFF);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4827      	ldr	r0, [pc, #156]	; (8000e28 <setLedV+0x15c>)
 8000d8c:	f001 f80f 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_ON);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <setLedV+0x15c>)
 8000d96:	f001 f80a 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_OFF);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <setLedV+0x15c>)
 8000da0:	f001 f805 	bl	8001dae <HAL_GPIO_WritePin>
			verState = YEL;
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <setLedV+0x160>)
 8000da6:	2215      	movs	r2, #21
 8000da8:	601a      	str	r2, [r3, #0]
			break;
 8000daa:	e038      	b.n	8000e1e <setLedV+0x152>
		case GRN:
			HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_OFF);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2110      	movs	r1, #16
 8000db0:	481d      	ldr	r0, [pc, #116]	; (8000e28 <setLedV+0x15c>)
 8000db2:	f000 fffc 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_OFF);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2120      	movs	r1, #32
 8000dba:	481b      	ldr	r0, [pc, #108]	; (8000e28 <setLedV+0x15c>)
 8000dbc:	f000 fff7 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_ON);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	4818      	ldr	r0, [pc, #96]	; (8000e28 <setLedV+0x15c>)
 8000dc6:	f000 fff2 	bl	8001dae <HAL_GPIO_WritePin>
			verState = GRN;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <setLedV+0x160>)
 8000dcc:	221f      	movs	r2, #31
 8000dce:	601a      	str	r2, [r3, #0]
			break;
 8000dd0:	e025      	b.n	8000e1e <setLedV+0x152>
		case ALL:
			HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_ON);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <setLedV+0x15c>)
 8000dd8:	f000 ffe9 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_ON);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2120      	movs	r1, #32
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <setLedV+0x15c>)
 8000de2:	f000 ffe4 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_ON);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	480f      	ldr	r0, [pc, #60]	; (8000e28 <setLedV+0x15c>)
 8000dec:	f000 ffdf 	bl	8001dae <HAL_GPIO_WritePin>
			verState = ALL;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <setLedV+0x160>)
 8000df2:	2229      	movs	r2, #41	; 0x29
 8000df4:	601a      	str	r2, [r3, #0]
			break;
 8000df6:	e012      	b.n	8000e1e <setLedV+0x152>
		default:
			HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_OFF);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <setLedV+0x15c>)
 8000dfe:	f000 ffd6 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_OFF);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <setLedV+0x15c>)
 8000e08:	f000 ffd1 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_OFF);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <setLedV+0x15c>)
 8000e12:	f000 ffcc 	bl	8001dae <HAL_GPIO_WritePin>
			verState = NONE;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <setLedV+0x160>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
			break;
 8000e1c:	bf00      	nop
	}

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	200000f4 	.word	0x200000f4

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f000 fc96 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f80c 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f000 f892 	bl	8000f64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e40:	f000 f844 	bl	8000ecc <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <main+0x20>)
 8000e46:	f001 fc0f 	bl	8002668 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_run();
 8000e4a:	f7ff fa3f 	bl	80002cc <fsm_run>
 8000e4e:	e7fc      	b.n	8000e4a <main+0x1a>
 8000e50:	20000130 	.word	0x20000130

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b090      	sub	sp, #64	; 0x40
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	2228      	movs	r2, #40	; 0x28
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 ffb0 	bl	8002dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 ffc0 	bl	8001e10 <HAL_RCC_OscConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e96:	f000 f8c9 	bl	800102c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fa2c 	bl	8002310 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ebe:	f000 f8b5 	bl	800102c <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3740      	adds	r7, #64	; 0x40
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000ef2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ef6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f00:	2209      	movs	r2, #9
 8000f02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f12:	f001 fb59 	bl	80025c8 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f1c:	f000 f886 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f2e:	f001 fcd7 	bl	80028e0 <HAL_TIM_ConfigClockSource>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f38:	f000 f878 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f4a:	f001 feaf 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f54:	f000 f86a 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000130 	.word	0x20000130

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <MX_GPIO_Init+0xbc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a28      	ldr	r2, [pc, #160]	; (8001020 <MX_GPIO_Init+0xbc>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_GPIO_Init+0xbc>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <MX_GPIO_Init+0xbc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a22      	ldr	r2, [pc, #136]	; (8001020 <MX_GPIO_Init+0xbc>)
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_GPIO_Init+0xbc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red_h_Pin|yel_h_Pin|grn_h_Pin|red_v_Pin
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <MX_GPIO_Init+0xc0>)
 8000fb0:	f000 fefd 	bl	8001dae <HAL_GPIO_WritePin>
                          |yel_v_Pin|grn_v_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_h_Pin|b_h_Pin|c_h_Pin|d_v_Pin
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000fba:	481b      	ldr	r0, [pc, #108]	; (8001028 <MX_GPIO_Init+0xc4>)
 8000fbc:	f000 fef7 	bl	8001dae <HAL_GPIO_WritePin>
                          |b_v_Pin|c_v_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red_h_Pin yel_h_Pin grn_h_Pin red_v_Pin
                           yel_v_Pin grn_v_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red_h_Pin|yel_h_Pin|grn_h_Pin|red_v_Pin
 8000fc0:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000fc4:	60bb      	str	r3, [r7, #8]
                          |yel_v_Pin|grn_v_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4812      	ldr	r0, [pc, #72]	; (8001024 <MX_GPIO_Init+0xc0>)
 8000fda:	f000 fd57 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : a_h_Pin b_h_Pin c_h_Pin d_v_Pin
                           e_v_Pin f_v_Pin g_v_Pin d_h_Pin
                           e_h_Pin f_h_Pin g_h_Pin a_v_Pin
                           b_v_Pin c_v_Pin */
  GPIO_InitStruct.Pin = a_h_Pin|b_h_Pin|c_h_Pin|d_v_Pin
 8000fde:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000fe2:	60bb      	str	r3, [r7, #8]
                          |e_v_Pin|f_v_Pin|g_v_Pin|d_h_Pin
                          |e_h_Pin|f_h_Pin|g_h_Pin|a_v_Pin
                          |b_v_Pin|c_v_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_GPIO_Init+0xc4>)
 8000ff8:	f000 fd48 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : sw0_Pin sw1_Pin sw2_Pin */
  GPIO_InitStruct.Pin = sw0_Pin|sw1_Pin|sw2_Pin;
 8000ffc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001000:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_GPIO_Init+0xc0>)
 8001012:	f000 fd3b 	bl	8001a8c <HAL_GPIO_Init>

}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <set7SegH>:
{0, 0, 0, 0, 0, 0, 0}, //8
{0, 0, 0, 0, 1, 0, 0}, //9
{1, 1, 1, 1, 1, 1, 1} //TURN OFF
};

void set7SegH(int num){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	if(num >= 0 && num <= 9){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db1e      	blt.n	8001084 <set7SegH+0x4c>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b09      	cmp	r3, #9
 800104a:	dc1b      	bgt.n	8001084 <set7SegH+0x4c>
		for(int i = 0; i < 7;i++){
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e014      	b.n	800107c <set7SegH+0x44>
			HAL_GPIO_WritePin(a_h_GPIO_Port, a_h_Pin << i, pinArr[num][i]);
 8001052:	2201      	movs	r2, #1
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	b299      	uxth	r1, r3
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <set7SegH+0x84>)
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	18c2      	adds	r2, r0, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4813      	ldr	r0, [pc, #76]	; (80010c0 <set7SegH+0x88>)
 8001072:	f000 fe9c 	bl	8001dae <HAL_GPIO_WritePin>
		for(int i = 0; i < 7;i++){
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b06      	cmp	r3, #6
 8001080:	dde7      	ble.n	8001052 <set7SegH+0x1a>
 8001082:	e017      	b.n	80010b4 <set7SegH+0x7c>
		}
	}
	else{
		for(int i = 0; i < 7;i++){
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	e010      	b.n	80010ac <set7SegH+0x74>
			HAL_GPIO_WritePin(a_h_GPIO_Port, a_h_Pin << i, pinArr[10][i]);
 800108a:	2201      	movs	r2, #1
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	b299      	uxth	r1, r3
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <set7SegH+0x84>)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	3346      	adds	r3, #70	; 0x46
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <set7SegH+0x88>)
 80010a2:	f000 fe84 	bl	8001dae <HAL_GPIO_WritePin>
		for(int i = 0; i < 7;i++){
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	ddeb      	ble.n	800108a <set7SegH+0x52>
	}
	}
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000060 	.word	0x20000060
 80010c0:	40010c00 	.word	0x40010c00

080010c4 <set7SegV>:
void set7SegV(int num){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
		if(num >= 0 && num <= 9){
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db1e      	blt.n	8001110 <set7SegV+0x4c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b09      	cmp	r3, #9
 80010d6:	dc1b      	bgt.n	8001110 <set7SegV+0x4c>
			for(int i = 0; i < 7;i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e014      	b.n	8001108 <set7SegV+0x44>
				HAL_GPIO_WritePin(a_v_GPIO_Port, a_v_Pin << i, pinArr[num][i]);
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	b299      	uxth	r1, r3
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <set7SegV+0x84>)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	1a9b      	subs	r3, r3, r2
 80010f2:	18c2      	adds	r2, r0, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <set7SegV+0x88>)
 80010fe:	f000 fe56 	bl	8001dae <HAL_GPIO_WritePin>
			for(int i = 0; i < 7;i++){
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b06      	cmp	r3, #6
 800110c:	dde7      	ble.n	80010de <set7SegV+0x1a>
 800110e:	e017      	b.n	8001140 <set7SegV+0x7c>
			}
		}
		else{
			for(int i = 0; i < 7;i++){
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	e010      	b.n	8001138 <set7SegV+0x74>
				HAL_GPIO_WritePin(a_v_GPIO_Port, a_v_Pin << i, pinArr[10][i]);
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	b299      	uxth	r1, r3
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <set7SegV+0x84>)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	3346      	adds	r3, #70	; 0x46
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <set7SegV+0x88>)
 800112e:	f000 fe3e 	bl	8001dae <HAL_GPIO_WritePin>
			for(int i = 0; i < 7;i++){
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b06      	cmp	r3, #6
 800113c:	ddeb      	ble.n	8001116 <set7SegV+0x52>
		}
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000060 	.word	0x20000060
 800114c:	40010c00 	.word	0x40010c00

08001150 <scanLED>:
void scanLED(int state){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	state = state % 2;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	bfb8      	it	lt
 8001162:	425b      	neglt	r3, r3
 8001164:	607b      	str	r3, [r7, #4]
	switch (state){
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <scanLED+0x24>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d022      	beq.n	80011b8 <scanLED+0x68>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, GPIO_PIN_RESET);
			set7SegH(segment_buffer[1]);
			set7SegV(segment_buffer[3]);
			break;
	}
}
 8001172:	e043      	b.n	80011fc <scanLED+0xac>
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, GPIO_PIN_RESET); //on
 8001174:	2200      	movs	r2, #0
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	4822      	ldr	r0, [pc, #136]	; (8001204 <scanLED+0xb4>)
 800117a:	f000 fe18 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001184:	481f      	ldr	r0, [pc, #124]	; (8001204 <scanLED+0xb4>)
 8001186:	f000 fe12 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	481c      	ldr	r0, [pc, #112]	; (8001204 <scanLED+0xb4>)
 8001192:	f000 fe0c 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119c:	4819      	ldr	r0, [pc, #100]	; (8001204 <scanLED+0xb4>)
 800119e:	f000 fe06 	bl	8001dae <HAL_GPIO_WritePin>
			set7SegH(segment_buffer[0]);
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <scanLED+0xb8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff46 	bl	8001038 <set7SegH>
			set7SegV(segment_buffer[2]);
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <scanLED+0xb8>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff87 	bl	80010c4 <set7SegV>
			break;
 80011b6:	e021      	b.n	80011fc <scanLED+0xac>
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, GPIO_PIN_SET); //on
 80011b8:	2201      	movs	r2, #1
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <scanLED+0xb4>)
 80011be:	f000 fdf6 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	480e      	ldr	r0, [pc, #56]	; (8001204 <scanLED+0xb4>)
 80011ca:	f000 fdf0 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <scanLED+0xb4>)
 80011d6:	f000 fdea 	bl	8001dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <scanLED+0xb4>)
 80011e2:	f000 fde4 	bl	8001dae <HAL_GPIO_WritePin>
			set7SegH(segment_buffer[1]);
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <scanLED+0xb8>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff24 	bl	8001038 <set7SegH>
			set7SegV(segment_buffer[3]);
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <scanLED+0xb8>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff65 	bl	80010c4 <set7SegV>
			break;
 80011fa:	bf00      	nop
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40010800 	.word	0x40010800
 8001208:	200000f8 	.word	0x200000f8

0800120c <updateSegment>:

void updateSegment(int x, int y, int z, int t){
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
	segment_buffer[0] = x % 10;
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <updateSegment+0x88>)
 800121e:	fb83 2301 	smull	r2, r3, r3, r1
 8001222:	109a      	asrs	r2, r3, #2
 8001224:	17cb      	asrs	r3, r1, #31
 8001226:	1ad2      	subs	r2, r2, r3
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	1aca      	subs	r2, r1, r3
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <updateSegment+0x8c>)
 8001234:	601a      	str	r2, [r3, #0]
	segment_buffer[1] = y % 10;
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <updateSegment+0x88>)
 800123a:	fb83 2301 	smull	r2, r3, r3, r1
 800123e:	109a      	asrs	r2, r3, #2
 8001240:	17cb      	asrs	r3, r1, #31
 8001242:	1ad2      	subs	r2, r2, r3
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	1aca      	subs	r2, r1, r3
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <updateSegment+0x8c>)
 8001250:	605a      	str	r2, [r3, #4]
	segment_buffer[2] = z % 10;
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <updateSegment+0x88>)
 8001256:	fb83 2301 	smull	r2, r3, r3, r1
 800125a:	109a      	asrs	r2, r3, #2
 800125c:	17cb      	asrs	r3, r1, #31
 800125e:	1ad2      	subs	r2, r2, r3
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	1aca      	subs	r2, r1, r3
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <updateSegment+0x8c>)
 800126c:	609a      	str	r2, [r3, #8]
	segment_buffer[3] = t % 10;
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <updateSegment+0x88>)
 8001272:	fb83 2301 	smull	r2, r3, r3, r1
 8001276:	109a      	asrs	r2, r3, #2
 8001278:	17cb      	asrs	r3, r1, #31
 800127a:	1ad2      	subs	r2, r2, r3
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	1aca      	subs	r2, r1, r3
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <updateSegment+0x8c>)
 8001288:	60da      	str	r2, [r3, #12]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	66666667 	.word	0x66666667
 8001298:	200000f8 	.word	0x200000f8

0800129c <updateSegment2Digits>:
void updateSegment2Digits(int a, int b){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
	segment_buffer[0] = a / 10;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <updateSegment2Digits+0x70>)
 80012aa:	fb82 1203 	smull	r1, r2, r2, r3
 80012ae:	1092      	asrs	r2, r2, #2
 80012b0:	17db      	asrs	r3, r3, #31
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <updateSegment2Digits+0x74>)
 80012b6:	6013      	str	r3, [r2, #0]
	segment_buffer[1] = a % 10;
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <updateSegment2Digits+0x70>)
 80012bc:	fb83 2301 	smull	r2, r3, r3, r1
 80012c0:	109a      	asrs	r2, r3, #2
 80012c2:	17cb      	asrs	r3, r1, #31
 80012c4:	1ad2      	subs	r2, r2, r3
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	1aca      	subs	r2, r1, r3
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <updateSegment2Digits+0x74>)
 80012d2:	605a      	str	r2, [r3, #4]
	segment_buffer[2] = b / 10;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4a0d      	ldr	r2, [pc, #52]	; (800130c <updateSegment2Digits+0x70>)
 80012d8:	fb82 1203 	smull	r1, r2, r2, r3
 80012dc:	1092      	asrs	r2, r2, #2
 80012de:	17db      	asrs	r3, r3, #31
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <updateSegment2Digits+0x74>)
 80012e4:	6093      	str	r3, [r2, #8]
	segment_buffer[3] = b % 10;
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <updateSegment2Digits+0x70>)
 80012ea:	fb83 2301 	smull	r2, r3, r3, r1
 80012ee:	109a      	asrs	r2, r3, #2
 80012f0:	17cb      	asrs	r3, r1, #31
 80012f2:	1ad2      	subs	r2, r2, r3
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	1aca      	subs	r2, r1, r3
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <updateSegment2Digits+0x74>)
 8001300:	60da      	str	r2, [r3, #12]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	66666667 	.word	0x66666667
 8001310:	200000f8 	.word	0x200000f8

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_MspInit+0x5c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <HAL_MspInit+0x5c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6193      	str	r3, [r2, #24]
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_MspInit+0x5c>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_MspInit+0x5c>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_MspInit+0x5c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_MspInit+0x5c>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_MspInit+0x60>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_MspInit+0x60>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d113      	bne.n	80013b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_TIM_Base_MspInit+0x44>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_TIM_Base_MspInit+0x44>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_TIM_Base_MspInit+0x44>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	201c      	movs	r0, #28
 80013a8:	f000 fb39 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ac:	201c      	movs	r0, #28
 80013ae:	f000 fb52 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f9f3 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM2_IRQHandler+0x10>)
 8001416:	f001 f973 	bl	8002700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000130 	.word	0x20000130

08001424 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <set1>:
#include "timer.h"

int timer1 = 0, timer2 = 0,timer3 = 0, timer4 = 0, timer5 = 0;
int flag1 = 0, flag2 = 0, flag3 = 0, flag4 = 0, flag5 = 0;

void set1(int timer){
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	timer1 = timer / CYCLE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <set1+0x2c>)
 800143c:	fb82 1203 	smull	r1, r2, r2, r3
 8001440:	1092      	asrs	r2, r2, #2
 8001442:	17db      	asrs	r3, r3, #31
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <set1+0x30>)
 8001448:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <set1+0x34>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	66666667 	.word	0x66666667
 8001460:	20000108 	.word	0x20000108
 8001464:	2000011c 	.word	0x2000011c

08001468 <set2>:
void set2(int timer){
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	timer2 = timer / CYCLE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <set2+0x2c>)
 8001474:	fb82 1203 	smull	r1, r2, r2, r3
 8001478:	1092      	asrs	r2, r2, #2
 800147a:	17db      	asrs	r3, r3, #31
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	4a06      	ldr	r2, [pc, #24]	; (8001498 <set2+0x30>)
 8001480:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <set2+0x34>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	66666667 	.word	0x66666667
 8001498:	2000010c 	.word	0x2000010c
 800149c:	20000120 	.word	0x20000120

080014a0 <set3>:
void set3(int timer){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	timer3 = timer / CYCLE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <set3+0x2c>)
 80014ac:	fb82 1203 	smull	r1, r2, r2, r3
 80014b0:	1092      	asrs	r2, r2, #2
 80014b2:	17db      	asrs	r3, r3, #31
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <set3+0x30>)
 80014b8:	6013      	str	r3, [r2, #0]
	flag3 = 0;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <set3+0x34>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	66666667 	.word	0x66666667
 80014d0:	20000110 	.word	0x20000110
 80014d4:	20000124 	.word	0x20000124

080014d8 <set4>:
void set4(int timer){
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	timer4 = timer / CYCLE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <set4+0x2c>)
 80014e4:	fb82 1203 	smull	r1, r2, r2, r3
 80014e8:	1092      	asrs	r2, r2, #2
 80014ea:	17db      	asrs	r3, r3, #31
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <set4+0x30>)
 80014f0:	6013      	str	r3, [r2, #0]
	flag4 = 0;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <set4+0x34>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	66666667 	.word	0x66666667
 8001508:	20000114 	.word	0x20000114
 800150c:	20000128 	.word	0x20000128

08001510 <set5>:
void set5(int timer){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	timer5 = timer / CYCLE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <set5+0x2c>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	1092      	asrs	r2, r2, #2
 8001522:	17db      	asrs	r3, r3, #31
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <set5+0x30>)
 8001528:	6013      	str	r3, [r2, #0]
	flag5 = 0;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <set5+0x34>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	66666667 	.word	0x66666667
 8001540:	20000118 	.word	0x20000118
 8001544:	2000012c 	.word	0x2000012c

08001548 <resetTimer>:

void resetTimer(int timer){
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	2b04      	cmp	r3, #4
 8001556:	d830      	bhi.n	80015ba <resetTimer+0x72>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <resetTimer+0x18>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001575 	.word	0x08001575
 8001564:	08001583 	.word	0x08001583
 8001568:	08001591 	.word	0x08001591
 800156c:	0800159f 	.word	0x0800159f
 8001570:	080015ad 	.word	0x080015ad
	switch(timer){
	case 1:
		timer1 = 0;
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <resetTimer+0xbc>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
		flag1 = 0;
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <resetTimer+0xc0>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
		break;
 8001580:	e03a      	b.n	80015f8 <resetTimer+0xb0>
	case 2:
		timer2 = 0;
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <resetTimer+0xc4>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
		flag2 = 0;
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <resetTimer+0xc8>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		break;
 800158e:	e033      	b.n	80015f8 <resetTimer+0xb0>
	case 3:
		timer3 = 0;
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <resetTimer+0xcc>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
		flag3 = 0;
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <resetTimer+0xd0>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
		break;
 800159c:	e02c      	b.n	80015f8 <resetTimer+0xb0>
	case 4:
		timer4 = 0;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <resetTimer+0xd4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
		flag4 = 0;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <resetTimer+0xd8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
		break;
 80015aa:	e025      	b.n	80015f8 <resetTimer+0xb0>
	case 5:
		timer5 = 0;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <resetTimer+0xdc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
		flag5 = 0;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <resetTimer+0xe0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
		break;
 80015b8:	e01e      	b.n	80015f8 <resetTimer+0xb0>
	default:
		timer1 = 0;
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <resetTimer+0xbc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
		timer2 = 0;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <resetTimer+0xc4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
		timer3 = 0;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <resetTimer+0xcc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
		timer4 = 0;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <resetTimer+0xd4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
		timer5 = 0;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <resetTimer+0xdc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
		flag1 = 0;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <resetTimer+0xc0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
		flag2 = 0;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <resetTimer+0xc8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
		flag3 = 0;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <resetTimer+0xd0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
		flag4 = 0;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <resetTimer+0xd8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
		flag5 = 0;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <resetTimer+0xe0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
		break;
 80015f6:	bf00      	nop
	}
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000108 	.word	0x20000108
 8001608:	2000011c 	.word	0x2000011c
 800160c:	2000010c 	.word	0x2000010c
 8001610:	20000120 	.word	0x20000120
 8001614:	20000110 	.word	0x20000110
 8001618:	20000124 	.word	0x20000124
 800161c:	20000114 	.word	0x20000114
 8001620:	20000128 	.word	0x20000128
 8001624:	20000118 	.word	0x20000118
 8001628:	2000012c 	.word	0x2000012c

0800162c <timerRun>:
void timerRun(){
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	if(timer1 > 0){
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <timerRun+0xac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd0b      	ble.n	8001650 <timerRun+0x24>
		timer1--;
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <timerRun+0xac>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <timerRun+0xac>)
 8001640:	6013      	str	r3, [r2, #0]
		if(timer1 <= 0){
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <timerRun+0xac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dc02      	bgt.n	8001650 <timerRun+0x24>
			flag1 = 1;
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <timerRun+0xb0>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2 > 0){
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <timerRun+0xb4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd0b      	ble.n	8001670 <timerRun+0x44>
			timer2--;
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <timerRun+0xb4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <timerRun+0xb4>)
 8001660:	6013      	str	r3, [r2, #0]
			if(timer2 <= 0){
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <timerRun+0xb4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dc02      	bgt.n	8001670 <timerRun+0x44>
				flag2 = 1;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <timerRun+0xb8>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer3 > 0){
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <timerRun+0xbc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dd0b      	ble.n	8001690 <timerRun+0x64>
			timer3--;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <timerRun+0xbc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <timerRun+0xbc>)
 8001680:	6013      	str	r3, [r2, #0]
			if(timer3 <= 0){
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <timerRun+0xbc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dc02      	bgt.n	8001690 <timerRun+0x64>
				flag3 = 1;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <timerRun+0xc0>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer4 > 0){
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <timerRun+0xc4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd0b      	ble.n	80016b0 <timerRun+0x84>
			timer4--;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <timerRun+0xc4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <timerRun+0xc4>)
 80016a0:	6013      	str	r3, [r2, #0]
			if(timer4 <= 0){
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <timerRun+0xc4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc02      	bgt.n	80016b0 <timerRun+0x84>
				flag4 = 1;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <timerRun+0xc8>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer5 > 0){
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <timerRun+0xcc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dd0b      	ble.n	80016d0 <timerRun+0xa4>
			timer5--;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <timerRun+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <timerRun+0xcc>)
 80016c0:	6013      	str	r3, [r2, #0]
			if(timer5 <= 0){
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <timerRun+0xcc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dc02      	bgt.n	80016d0 <timerRun+0xa4>
				flag5 = 1;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <timerRun+0xd0>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
			}
		}
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000108 	.word	0x20000108
 80016dc:	2000011c 	.word	0x2000011c
 80016e0:	2000010c 	.word	0x2000010c
 80016e4:	20000120 	.word	0x20000120
 80016e8:	20000110 	.word	0x20000110
 80016ec:	20000124 	.word	0x20000124
 80016f0:	20000114 	.word	0x20000114
 80016f4:	20000128 	.word	0x20000128
 80016f8:	20000118 	.word	0x20000118
 80016fc:	2000012c 	.word	0x2000012c

08001700 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001708:	f7fe fd3a 	bl	8000180 <getKeyInput>
	timerRun();
 800170c:	f7ff ff8e 	bl	800162c <timerRun>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001718:	f7ff fe84 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800171e:	490c      	ldr	r1, [pc, #48]	; (8001750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001734:	4c09      	ldr	r4, [pc, #36]	; (800175c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f001 fb1d 	bl	8002d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001746:	f7ff fb73 	bl	8000e30 <main>
  bx lr
 800174a:	4770      	bx	lr
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001754:	08002e1c 	.word	0x08002e1c
  ldr r2, =_sbss
 8001758:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800175c:	2000017c 	.word	0x2000017c

08001760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x28>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x28>)
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f947 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fdc8 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f95f 	bl	8001a72 <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f927 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200000b0 	.word	0x200000b0
 80017e8:	200000b8 	.word	0x200000b8
 80017ec:	200000b4 	.word	0x200000b4

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x1c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x20>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_IncTick+0x20>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	200000b8 	.word	0x200000b8
 8001810:	20000178 	.word	0x20000178

08001814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000178 	.word	0x20000178

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fff0 	bl	8001814 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffe0 	bl	8001814 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200000b8 	.word	0x200000b8

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <__NVIC_EnableIRQ+0x34>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff90 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff2d 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff42 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff90 	bl	8001960 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5f 	bl	800190c <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff35 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b08b      	sub	sp, #44	; 0x2c
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	e148      	b.n	8001d32 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8137 	bne.w	8001d2c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4aa3      	ldr	r2, [pc, #652]	; (8001d50 <HAL_GPIO_Init+0x2c4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d05e      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001ac8:	4aa1      	ldr	r2, [pc, #644]	; (8001d50 <HAL_GPIO_Init+0x2c4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d875      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001ace:	4aa1      	ldr	r2, [pc, #644]	; (8001d54 <HAL_GPIO_Init+0x2c8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d058      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001ad4:	4a9f      	ldr	r2, [pc, #636]	; (8001d54 <HAL_GPIO_Init+0x2c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d86f      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001ada:	4a9f      	ldr	r2, [pc, #636]	; (8001d58 <HAL_GPIO_Init+0x2cc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d052      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001ae0:	4a9d      	ldr	r2, [pc, #628]	; (8001d58 <HAL_GPIO_Init+0x2cc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d869      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001ae6:	4a9d      	ldr	r2, [pc, #628]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d04c      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001aec:	4a9b      	ldr	r2, [pc, #620]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d863      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001af2:	4a9b      	ldr	r2, [pc, #620]	; (8001d60 <HAL_GPIO_Init+0x2d4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d046      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001af8:	4a99      	ldr	r2, [pc, #612]	; (8001d60 <HAL_GPIO_Init+0x2d4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d85d      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	d82a      	bhi.n	8001b58 <HAL_GPIO_Init+0xcc>
 8001b02:	2b12      	cmp	r3, #18
 8001b04:	d859      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001b06:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <HAL_GPIO_Init+0x80>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b87 	.word	0x08001b87
 8001b10:	08001b61 	.word	0x08001b61
 8001b14:	08001b73 	.word	0x08001b73
 8001b18:	08001bb5 	.word	0x08001bb5
 8001b1c:	08001bbb 	.word	0x08001bbb
 8001b20:	08001bbb 	.word	0x08001bbb
 8001b24:	08001bbb 	.word	0x08001bbb
 8001b28:	08001bbb 	.word	0x08001bbb
 8001b2c:	08001bbb 	.word	0x08001bbb
 8001b30:	08001bbb 	.word	0x08001bbb
 8001b34:	08001bbb 	.word	0x08001bbb
 8001b38:	08001bbb 	.word	0x08001bbb
 8001b3c:	08001bbb 	.word	0x08001bbb
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001bbb 	.word	0x08001bbb
 8001b48:	08001bbb 	.word	0x08001bbb
 8001b4c:	08001bbb 	.word	0x08001bbb
 8001b50:	08001b69 	.word	0x08001b69
 8001b54:	08001b7d 	.word	0x08001b7d
 8001b58:	4a82      	ldr	r2, [pc, #520]	; (8001d64 <HAL_GPIO_Init+0x2d8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b5e:	e02c      	b.n	8001bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e029      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e024      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	3308      	adds	r3, #8
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e01f      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	330c      	adds	r3, #12
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e01a      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	623b      	str	r3, [r7, #32]
          break;
 8001b92:	e013      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	611a      	str	r2, [r3, #16]
          break;
 8001ba6:	e009      	b.n	8001bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	615a      	str	r2, [r3, #20]
          break;
 8001bb2:	e003      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          break;
 8001bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2bff      	cmp	r3, #255	; 0xff
 8001bc0:	d801      	bhi.n	8001bc6 <HAL_GPIO_Init+0x13a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	e001      	b.n	8001bca <HAL_GPIO_Init+0x13e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2bff      	cmp	r3, #255	; 0xff
 8001bd0:	d802      	bhi.n	8001bd8 <HAL_GPIO_Init+0x14c>
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	e002      	b.n	8001bde <HAL_GPIO_Init+0x152>
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	3b08      	subs	r3, #8
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	210f      	movs	r1, #15
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8090 	beq.w	8001d2c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_GPIO_Init+0x2dc>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a55      	ldr	r2, [pc, #340]	; (8001d68 <HAL_GPIO_Init+0x2dc>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_GPIO_Init+0x2dc>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_GPIO_Init+0x2e0>)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_GPIO_Init+0x1e0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <HAL_GPIO_Init+0x2e8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_GPIO_Init+0x2ec>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_GPIO_Init+0x1d8>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e004      	b.n	8001c6e <HAL_GPIO_Init+0x1e2>
 8001c64:	2303      	movs	r3, #3
 8001c66:	e002      	b.n	8001c6e <HAL_GPIO_Init+0x1e2>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_GPIO_Init+0x1e2>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	f002 0203 	and.w	r2, r2, #3
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	4093      	lsls	r3, r2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7e:	493b      	ldr	r1, [pc, #236]	; (8001d6c <HAL_GPIO_Init+0x2e0>)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	4937      	ldr	r1, [pc, #220]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ca6:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4933      	ldr	r1, [pc, #204]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	492d      	ldr	r1, [pc, #180]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	4929      	ldr	r1, [pc, #164]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4923      	ldr	r1, [pc, #140]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	491f      	ldr	r1, [pc, #124]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4919      	ldr	r1, [pc, #100]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4915      	ldr	r1, [pc, #84]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f aeaf 	bne.w	8001aa0 <HAL_GPIO_Init+0x14>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	372c      	adds	r7, #44	; 0x2c
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	10320000 	.word	0x10320000
 8001d54:	10310000 	.word	0x10310000
 8001d58:	10220000 	.word	0x10220000
 8001d5c:	10210000 	.word	0x10210000
 8001d60:	10120000 	.word	0x10120000
 8001d64:	10110000 	.word	0x10110000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40010800 	.word	0x40010800
 8001d74:	40010c00 	.word	0x40010c00
 8001d78:	40011000 	.word	0x40011000
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e001      	b.n	8001da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	807b      	strh	r3, [r7, #2]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dbe:	787b      	ldrb	r3, [r7, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc4:	887a      	ldrh	r2, [r7, #2]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dca:	e003      	b.n	8001dd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	041a      	lsls	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	611a      	str	r2, [r3, #16]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	400b      	ands	r3, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e26c      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e30:	4b92      	ldr	r3, [pc, #584]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d112      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e56:	4b89      	ldr	r3, [pc, #548]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x12c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d168      	bne.n	8001f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e246      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x76>
 8001e78:	4b80      	ldr	r3, [pc, #512]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a7f      	ldr	r2, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e02e      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7a      	ldr	r2, [pc, #488]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b78      	ldr	r3, [pc, #480]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a77      	ldr	r2, [pc, #476]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e01d      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0xbc>
 8001eb2:	4b72      	ldr	r3, [pc, #456]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a71      	ldr	r2, [pc, #452]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6a      	ldr	r2, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a67      	ldr	r2, [pc, #412]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff fc92 	bl	8001814 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fc8e 	bl	8001814 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1fa      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xe4>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fc7e 	bl	8001814 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fc7a 	bl	8001814 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1e6      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x10c>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	4b4c      	ldr	r3, [pc, #304]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f56:	4b49      	ldr	r3, [pc, #292]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x18c>
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x176>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e1ba      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4939      	ldr	r1, [pc, #228]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	e03a      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fc33 	bl	8001814 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fc2f 	bl	8001814 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e19b      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4927      	ldr	r1, [pc, #156]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
 8001fe4:	e015      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fc12 	bl	8001814 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fc0e 	bl	8001814 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e17a      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03a      	beq.n	8002094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d019      	beq.n	800205a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_RCC_OscConfig+0x274>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff fbf2 	bl	8001814 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff fbee 	bl	8001814 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e15a      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002052:	2001      	movs	r0, #1
 8002054:	f000 fa9a 	bl	800258c <RCC_Delay>
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_OscConfig+0x274>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7ff fbd8 	bl	8001814 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002066:	e00f      	b.n	8002088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff fbd4 	bl	8001814 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d908      	bls.n	8002088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e140      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	42420000 	.word	0x42420000
 8002084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b9e      	ldr	r3, [pc, #632]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e9      	bne.n	8002068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a6 	beq.w	80021ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b97      	ldr	r3, [pc, #604]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b94      	ldr	r3, [pc, #592]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a93      	ldr	r2, [pc, #588]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]
 80020be:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4b8e      	ldr	r3, [pc, #568]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020da:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a8a      	ldr	r2, [pc, #552]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e6:	f7ff fb95 	bl	8001814 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ee:	f7ff fb91 	bl	8001814 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b64      	cmp	r3, #100	; 0x64
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0fd      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x312>
 8002114:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a7a      	ldr	r2, [pc, #488]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e02d      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x334>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a75      	ldr	r2, [pc, #468]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a72      	ldr	r2, [pc, #456]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	e01c      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x356>
 800214c:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a69      	ldr	r2, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e00b      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002166:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a66      	ldr	r2, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b64      	ldr	r3, [pc, #400]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a63      	ldr	r2, [pc, #396]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7ff fb45 	bl	8001814 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff fb41 	bl	8001814 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0ab      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ee      	beq.n	800218e <HAL_RCC_OscConfig+0x37e>
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb2f 	bl	8001814 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fb2b 	bl	8001814 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e095      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b48      	ldr	r3, [pc, #288]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a47      	ldr	r2, [pc, #284]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8081 	beq.w	80022fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f8:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d061      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d146      	bne.n	800229a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_OscConfig+0x4fc>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff faff 	bl	8001814 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff fafb 	bl	8001814 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e067      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d108      	bne.n	8002254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	492d      	ldr	r1, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a19      	ldr	r1, [r3, #32]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	430b      	orrs	r3, r1
 8002266:	4927      	ldr	r1, [pc, #156]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x4fc>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff facf 	bl	8001814 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7ff facb 	bl	8001814 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e037      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x46a>
 8002298:	e02f      	b.n	80022fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_RCC_OscConfig+0x4fc>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fab8 	bl	8001814 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff fab4 	bl	8001814 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e020      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x498>
 80022c6:	e018      	b.n	80022fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	42420060 	.word	0x42420060

08002310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d0      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d910      	bls.n	8002354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4965      	ldr	r1, [pc, #404]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002376:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800238e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d040      	beq.n	8002430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d115      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e073      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06b      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4936      	ldr	r1, [pc, #216]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002400:	f7ff fa08 	bl	8001814 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7ff fa04 	bl	8001814 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e053      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d210      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4922      	ldr	r1, [pc, #136]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490a      	ldr	r1, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1cc>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f966 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08002df0 	.word	0x08002df0
 80024dc:	200000b0 	.word	0x200000b0
 80024e0:	200000b4 	.word	0x200000b4

080024e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fe:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <HAL_RCC_GetSysClockFreq+0x94>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x30>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x36>
 8002512:	e027      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	e027      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d010      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_GetSysClockFreq+0x94>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	0c5b      	lsrs	r3, r3, #17
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_RCC_GetSysClockFreq+0xa0>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_RCC_GetSysClockFreq+0x98>)
 8002546:	fb02 f203 	mul.w	r2, r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e004      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	613b      	str	r3, [r7, #16]
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetSysClockFreq+0x98>)
 8002566:	613b      	str	r3, [r7, #16]
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	693b      	ldr	r3, [r7, #16]
}
 800256c:	4618      	mov	r0, r3
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	007a1200 	.word	0x007a1200
 8002580:	08002e00 	.word	0x08002e00
 8002584:	08002e10 	.word	0x08002e10
 8002588:	003d0900 	.word	0x003d0900

0800258c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <RCC_Delay+0x34>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <RCC_Delay+0x38>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a8:	bf00      	nop
  }
  while (Delay --);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	60fa      	str	r2, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f9      	bne.n	80025a8 <RCC_Delay+0x1c>
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	200000b0 	.word	0x200000b0
 80025c4:	10624dd3 	.word	0x10624dd3

080025c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e041      	b.n	800265e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fec2 	bl	8001378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 fa56 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d001      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e035      	b.n	80026ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_TIM_Base_Start_IT+0x90>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_TIM_Base_Start_IT+0x4e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d004      	beq.n	80026b6 <HAL_TIM_Base_Start_IT+0x4e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_TIM_Base_Start_IT+0x94>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d111      	bne.n	80026da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b06      	cmp	r3, #6
 80026c6:	d010      	beq.n	80026ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d8:	e007      	b.n	80026ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40000400 	.word	0x40000400

08002700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d020      	beq.n	8002764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01b      	beq.n	8002764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0202 	mvn.w	r2, #2
 8002734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f998 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f98b 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f99a 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d020      	beq.n	80027b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0204 	mvn.w	r2, #4
 8002780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f972 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f965 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f974 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d020      	beq.n	80027fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0208 	mvn.w	r2, #8
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2204      	movs	r2, #4
 80027d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f94c 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f93f 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f94e 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d020      	beq.n	8002848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0210 	mvn.w	r2, #16
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2208      	movs	r2, #8
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f926 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f919 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f928 	bl	8002a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0201 	mvn.w	r2, #1
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe ff4a 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa6f 	bl	8002d6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00c      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8f8 	bl	8002aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0220 	mvn.w	r2, #32
 80028d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa42 	bl	8002d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x1c>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0b4      	b.n	8002a66 <HAL_TIM_ConfigClockSource+0x186>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800291a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002934:	d03e      	beq.n	80029b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293a:	f200 8087 	bhi.w	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800293e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002942:	f000 8086 	beq.w	8002a52 <HAL_TIM_ConfigClockSource+0x172>
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294a:	d87f      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b70      	cmp	r3, #112	; 0x70
 800294e:	d01a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0xa6>
 8002950:	2b70      	cmp	r3, #112	; 0x70
 8002952:	d87b      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d050      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0x11a>
 8002958:	2b60      	cmp	r3, #96	; 0x60
 800295a:	d877      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b50      	cmp	r3, #80	; 0x50
 800295e:	d03c      	beq.n	80029da <HAL_TIM_ConfigClockSource+0xfa>
 8002960:	2b50      	cmp	r3, #80	; 0x50
 8002962:	d873      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d058      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x13a>
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d86f      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b30      	cmp	r3, #48	; 0x30
 800296e:	d064      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	2b30      	cmp	r3, #48	; 0x30
 8002972:	d86b      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b20      	cmp	r3, #32
 8002976:	d060      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002978:	2b20      	cmp	r3, #32
 800297a:	d867      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05c      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	2b10      	cmp	r3, #16
 8002982:	d05a      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002984:	e062      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f000 f96a 	bl	8002c6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	609a      	str	r2, [r3, #8]
      break;
 80029b2:	e04f      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f000 f953 	bl	8002c6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d6:	609a      	str	r2, [r3, #8]
      break;
 80029d8:	e03c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f000 f8ca 	bl	8002b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2150      	movs	r1, #80	; 0x50
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f921 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 80029f8:	e02c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f000 f8e8 	bl	8002bdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2160      	movs	r1, #96	; 0x60
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f911 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 8002a18:	e01c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 f8aa 	bl	8002b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2140      	movs	r1, #64	; 0x40
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f901 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 8002a38:	e00c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f000 f8f8 	bl	8002c3a <TIM_ITRx_SetConfig>
      break;
 8002a4a:	e003      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a50:	e000      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_Base_SetConfig+0x28>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x28>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <TIM_Base_SetConfig+0xc4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <TIM_Base_SetConfig+0x52>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d003      	beq.n	8002b0a <TIM_Base_SetConfig+0x52>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <TIM_Base_SetConfig+0xc4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d108      	bne.n	8002b1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400

08002b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0201 	bic.w	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f023 030a 	bic.w	r3, r3, #10
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	621a      	str	r2, [r3, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f023 0210 	bic.w	r2, r3, #16
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	031b      	lsls	r3, r3, #12
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	621a      	str	r2, [r3, #32]
}
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f043 0307 	orr.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	021a      	lsls	r2, r3, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	609a      	str	r2, [r3, #8]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e041      	b.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d004      	beq.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a10      	ldr	r2, [pc, #64]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10c      	bne.n	8002d36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400

08002d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <__libc_init_array>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	2600      	movs	r6, #0
 8002d84:	4d0c      	ldr	r5, [pc, #48]	; (8002db8 <__libc_init_array+0x38>)
 8002d86:	4c0d      	ldr	r4, [pc, #52]	; (8002dbc <__libc_init_array+0x3c>)
 8002d88:	1b64      	subs	r4, r4, r5
 8002d8a:	10a4      	asrs	r4, r4, #2
 8002d8c:	42a6      	cmp	r6, r4
 8002d8e:	d109      	bne.n	8002da4 <__libc_init_array+0x24>
 8002d90:	f000 f822 	bl	8002dd8 <_init>
 8002d94:	2600      	movs	r6, #0
 8002d96:	4d0a      	ldr	r5, [pc, #40]	; (8002dc0 <__libc_init_array+0x40>)
 8002d98:	4c0a      	ldr	r4, [pc, #40]	; (8002dc4 <__libc_init_array+0x44>)
 8002d9a:	1b64      	subs	r4, r4, r5
 8002d9c:	10a4      	asrs	r4, r4, #2
 8002d9e:	42a6      	cmp	r6, r4
 8002da0:	d105      	bne.n	8002dae <__libc_init_array+0x2e>
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da8:	4798      	blx	r3
 8002daa:	3601      	adds	r6, #1
 8002dac:	e7ee      	b.n	8002d8c <__libc_init_array+0xc>
 8002dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db2:	4798      	blx	r3
 8002db4:	3601      	adds	r6, #1
 8002db6:	e7f2      	b.n	8002d9e <__libc_init_array+0x1e>
 8002db8:	08002e14 	.word	0x08002e14
 8002dbc:	08002e14 	.word	0x08002e14
 8002dc0:	08002e14 	.word	0x08002e14
 8002dc4:	08002e18 	.word	0x08002e18

08002dc8 <memset>:
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4402      	add	r2, r0
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <memset+0xa>
 8002dd0:	4770      	bx	lr
 8002dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd6:	e7f9      	b.n	8002dcc <memset+0x4>

08002dd8 <_init>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr

08002de4 <_fini>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr
